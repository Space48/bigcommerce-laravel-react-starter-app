<?php

namespace Tests\Unit\Services\Bigcommerce;

use App\Models\BigcommerceStore;
use App\Services\Bigcommerce;
use App\Services\Bigcommerce\WebhookManager;
use Tests\TestCase;

class WebhookManagerTest extends TestCase
{
    private Bigcommerce $bigcommerce;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->bigcommerce = $this->createMock(Bigcommerce::class);
    }

    public function testSetupNewWebhooks()
    {
        $response = ['data' => []];
        $this->bigcommerce->expects($this->once())
            ->method('fetchWebhooks')
            ->willReturn($response);
        $this->bigcommerce->expects($this->exactly(1))
            ->method('createWebhook');

        /** @var BigcommerceStore $store */
        $store = BigcommerceStore::factory()->make(['installed' => true]);

        $manager = new WebhookManager($this->bigcommerce);
        $manager->setupAndMaintain($store);
    }

    public function testCreateSomeWebhooks()
    {
        $response = [
            'data' => [
                [
                    'scope' => 'store/app/something-new',
                    'destination' => route('webhook.app.uninstalled'),
                ],
            ],
        ];
        $this->bigcommerce->expects($this->once())
            ->method('fetchWebhooks')
            ->willReturn($response);
        $this->bigcommerce->expects($this->once())
            ->method('createWebhook');

        /** @var BigcommerceStore $store */
        $store = BigcommerceStore::factory()->make(['installed' => true]);

        $manager = new WebhookManager($this->bigcommerce);
        $manager->setupAndMaintain($store);
    }

    public function testUpdateDestinationIfRequired()
    {
        $response = [
            'data' => [
                [
                    'id' => 345678,
                    'scope' => 'store/app/uninstalled',
                    'destination' => 'http://old-url',
                ],
            ],
        ];
        $this->bigcommerce->expects($this->once())
            ->method('fetchWebhooks')
            ->willReturn($response);

        /** @var BigcommerceStore $store */
        $store = BigcommerceStore::factory()->make(['installed' => true]);
        $this->bigcommerce->expects($this->once())
            ->method('updateWebhook');

        $manager = new WebhookManager($this->bigcommerce);
        $manager->setupAndMaintain($store);
    }

    public function testReenableIfRequired()
    {
        $response = [
            'data' => [
                [
                    'id' => 123456,
                    'scope' => 'store/app/uninstalled',
                    'destination' => route('webhook.app.uninstalled'),
                    'is_active' => false,
                ],
            ],
        ];
        $this->bigcommerce->expects($this->once())
            ->method('fetchWebhooks')
            ->willReturn($response);

        /** @var BigcommerceStore $store */
        $store = BigcommerceStore::factory()->make(['installed' => true]);
        $this->bigcommerce->expects($this->exactly(1))
            ->method('updateWebhook');

        $manager = new WebhookManager($this->bigcommerce);
        $manager->setupAndMaintain($store);
    }

    public function testNoActionOnUninstalledStored()
    {
        $this->bigcommerce->expects($this->exactly(0))
            ->method('fetchWebhooks');
        $this->bigcommerce->expects($this->exactly(0))
            ->method('createWebhook');

        /** @var BigcommerceStore $store */
        $store = BigcommerceStore::factory()->make(['installed' => false]);

        $manager = new WebhookManager($this->bigcommerce);
        $manager->setupAndMaintain($store);
    }
}
